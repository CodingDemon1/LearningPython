**Problem 36:**
Write a query to find the ride with the highest and lowest **`fare`**.
        SELECT * 
        FROM Rides 
        WHERE fare = (SELECT MAX(fare) FROM Rides)
        OR fare = (SELECT MIN(fare) FROM Rides);

**Problem 37:**
Write a query to find the average **`fare`** and **`distance`** for each **`driver_id`**.
        SELECT driver_id, AVG(fare) AS average_fare, AVG(distance) AS average_distance 
        FROM Rides 
        GROUP BY driver_id;

**Problem 38:**
Write a query to find **`driver_id`** that have completed more than 5 rides.
        SELECT driver_id 
        FROM Rides 
        GROUP BY driver_id 
        HAVING COUNT(id) > 5;

**Problem 39:**
Assuming there is another collection/table called **`Drivers`** with **`driver_id`** and **`name`** fields, write a query to find the name of the driver with the highest **`fare`**.
        SELECT d.name 
        FROM Drivers d 
        JOIN Rides r ON d.driver_id = r.driver_id 
        WHERE r.fare = (SELECT MAX(fare) FROM Rides);

**Problem 40:**
Write a query to find the top 3 drivers who have earned the most from fares. Return the drivers' ids and total earnings.
        SELECT driver_id, SUM(fare) AS total_earnings 
        FROM Rides 
        GROUP BY driver_id 
        ORDER BY total_earnings DESC 
        LIMIT 3;

**Problem 41:**
Assuming there's a **`ride_date`** field of date type in the **`Rides`** table / collection, write a query to find all rides that happened in the last 7 days.
        SELECT * 
        FROM Rides 
        WHERE ride_date BETWEEN CURRENT_DATE - INTERVAL 7 DAY AND CURRENT_DATE;

**Problem 42:**
Write a query to find all rides where the **`end_location`** is not set.
        SELECT * 
        FROM Rides 
        WHERE end_location IS NULL;

**Problem 43:**
Write a query to calculate the fare per mile for each ride and return the ride ids and their fare per mile, ordered by fare per mile in descending order.
        SELECT id, fare/distance AS fare_per_mile 
        FROM Rides 
        ORDER BY fare_per_mile DESC;

**Problem 44:**
Assuming there's another collection/table **`Passengers`** with **`passenger_id`** and **`name`** fields, write a query to return a list of all rides including the driver's name and passenger's name.
        SELECT r.id AS ride_id, d.name AS driver_name, p.name AS passenger_name 
        FROM Rides r 
        JOIN Drivers d ON r.driver_id = d.driver_id 
        JOIN Passengers p ON r.passenger_id = p.passenger_id;

**Problem 45:**
Write a query to add a **`tip`** field to the **`Rides`** table / collection.
        ALTER TABLE Rides 
        ADD tip INT DEFAULT 0;
